from typing import Literal
from datetime import datetime, timedelta

from aiogram import types
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types.web_app_info import WebAppInfo


from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from db.base import (User)

from utils.any import faq_answer_dict, support_request_type_dict


# faq_answer_dict = {
#     'common': [
#         '<b>- –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à —Å–µ—Ä–≤–∏—Å?</b>\n\n–ú—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–π–º–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –ú–§–û –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–∏–Ω–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –ø–æ–º–æ–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.',
#         '<b>- –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?</b>\n\n–î–∞, –Ω–∞—à —Å–µ—Ä–≤–∏—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤. –ú—ã –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –æ—Ç –ú–§–û, –∞ –≤—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏.',
#         '<b>- –ö–∞–∫–∏–µ –ú–§–û —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—é—Ç —Å –≤–∞–º–∏?</b>\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –º–∏–∫—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏, –∏–º–µ—é—â–∏–º–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –¶–ë –†–§.',
#         '<b>- –ú–æ–∂–Ω–æ –ª–∏ –¥–æ–≤–µ—Ä—è—Ç—å –≤–∞—à–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º?</b>\n\n–î–∞, –º—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ú–§–û. –í—ã —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.',
#     ],
#     'search_credit': [
#         '<b>- –ö–∞–∫ –±—ã—Å—Ç—Ä–æ —è –ø–æ–ª—É—á—É –ø–æ–¥–±–æ—Ä–∫—É –∑–∞–π–º–æ–≤?</b>\n\n–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ!',
#         '<b>- –ù—É–∂–Ω–æ –ª–∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –ú–§–û?</b>\n\n–ß–µ–º –±–æ–ª—å—à–µ –∑–∞—è–≤–æ–∫ –≤—ã –ø–æ–¥–∞–¥–∏—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è. –ï—Å–ª–∏ –æ–¥–æ–±—Ä—è—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è. –ó–∞–ø–æ–º–Ω–∏—Ç–µ, –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–µ–º –Ω–∏ –∫ —á–µ–º—É –≤–∞—Å –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç.',
#         '<b>- –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∑–∞–π–º–∞?</b>\n\n–ü–∞—Å–ø–æ—Ä—Ç, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–µ.',
#         '<b>-–í–ª–∏—è–µ—Ç –ª–∏ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–∞ –ø–æ–¥–±–æ—Ä?</b>\n\n–ù–µ—Ç, –º—ã –ø–æ–∫–∞–∂–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–∂–µ —Å –ø–ª–æ—Ö–æ–π –ö–ò, –Ω–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ú–§–û.',
#     ],
#     'get_money': [
#         '<b>- –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–¥—É—Ç –¥–µ–Ω—å–≥–∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è?</b>\n\n–û—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ú–§–û –∏ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è.',
#         '<b>- –ù–∞ –∫–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–π–º?</b>\n\n–ù–∞ Visa, Mastercard –∏–ª–∏ –ú–ò–†. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ú–§–û —Ç–∞–∫–∂–µ –≤—ã–¥–∞—é—Ç –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏.',
#         '<b>- –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏?</b>\n\n–î–∞, –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ú–§–û –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—ã.',
#     ],
#     'repayment': [
#         '<b>- –ö–∞–∫ –ø–æ–≥–∞—Å–∏—Ç—å –∑–∞–π–º?</b>\n\n–ß–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ú–§–û, –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏.',
#         '<b>- –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –∑–∞–π–º?</b>\n\n–î–∞, –Ω–æ —É—Å–ª–æ–≤–∏—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ú–§–û. –£—Ç–æ—á–Ω—è–π—Ç–µ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏.',
#         '<b>- –ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–µ?</b>\n\n–ù–∞—á–∏—Å–ª—è—Ç—Å—è —à—Ç—Ä–∞—Ñ—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ —É—Ç–æ—á–Ω—è—Ç—å —Ä–∞–∑–º–µ—Ä –ø–µ–Ω–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ú–§–û.',
#     ],
#     'safe': [
#         '<b>- –ö—É–¥–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –º–æ–∏ –¥–∞–Ω–Ω—ã–µ?</b>\n\n–¢–æ–ª—å–∫–æ –≤ —Ç—É –ú–§–û, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∑–∞—è–≤–∫–∏ –∏ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ–º —Å–≤–µ–¥–µ–Ω–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º. ',
#         '<b>- –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–π–º–∞ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è?</b>\n\n–î–∞, –¥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –≤—ã –≤–ø—Ä–∞–≤–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –±–µ–∑ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π.',
#     ],
# }


def create_start_kb():
    _kb = InlineKeyboardBuilder()
    _kb.row(types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–ºüí∏',
                                       web_app=WebAppInfo(url=f'https://zaymmgnovenno.credystore.com/')))
    _kb.row(types.InlineKeyboardButton(text='–í–æ–ø—Ä–æ—Å—ã / –û—Ç–≤–µ—Ç—ã',
                                       callback_data='faq'))
    _kb.add(types.InlineKeyboardButton(text='–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                                       callback_data='support'))
    
    return _kb


def create_back_and_webapp_kb():
    _kb = InlineKeyboardBuilder()
    _kb.row(types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–ºüí∏',
                                       web_app=WebAppInfo(url=f'https://zaymmgnovenno.credystore.com/')))
    _kb.row(types.InlineKeyboardButton(text='üîô–ù–∞–∑–∞–¥',
                                        callback_data='back'))
    
    return _kb


def create_faq_block_kb(faq_list: list[tuple[str, str]]):
    _kb = InlineKeyboardBuilder()

    for faq_tuple in faq_list:
        _kb.row(types.InlineKeyboardButton(text=faq_tuple[0],
                                           callback_data=f'faq__{faq_tuple[-1]}'))
        
    _kb.row(types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–ºüí∏',
                                       web_app=WebAppInfo(url=f'https://zaymmgnovenno.credystore.com/')))
    _kb.row(types.InlineKeyboardButton(text='‚úñÔ∏è–ó–∞–∫—Ä—ã—Ç—å',
                                        callback_data='close'))
    
    return _kb


def create_specific_faq_list(faq_data: Literal['common',
                                             'search_credit',
                                             'get_money',
                                             'repayment',
                                             'safe']):
    if faq_data not in faq_answer_dict:
        return 'error'
    
    return faq_answer_dict.get(faq_data)


def create_webapp_btn_kb(_kb: InlineKeyboardBuilder = None):
    if not _kb:
        _kb = InlineKeyboardBuilder()
    _kb.add(types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–ºüí∏',
                                       web_app=WebAppInfo(url=f'https://zaymmgnovenno.credystore.com/')))
    # _kb.row(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',
    #                                    callback_data='check_price'))

    return _kb


def test_create_webapp_btn_kb(_kb: InlineKeyboardBuilder = None):
    if not _kb:
        _kb = InlineKeyboardBuilder()
    _kb.add(types.InlineKeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –∑–∞–π–ºüí∏',
                                       url='https://t.me/top100mfo/69'))
    # _kb.row(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',
    #                                    callback_data='check_price'))

    return _kb



def create_support_kb():
    _kb = InlineKeyboardBuilder()

    for request_type_tuple in support_request_type_dict.items():
        _kb.row(types.InlineKeyboardButton(text=request_type_tuple[-1],
                                           callback_data=f'support_{request_type_tuple[0]}'))
    _kb.row(types.InlineKeyboardButton(text='‚úñÔ∏è–ó–∞–∫—Ä—ã—Ç—å',
                                        callback_data='close'))

    return _kb


def create_cancel_kb():
    _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ',
                                       callback_data='cancel'))
    
    return _kb


def create_order_confirm_kb():
    _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å',
                                       callback_data='cancel'))
    _kb.add(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                       callback_data='send_order'))
    
    return _kb


def create_wb_start_kb():
    _kb = InlineKeyboardBuilder()
    _kb.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
                                       callback_data='add_punkt'))
    _kb.row(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏',
                                       callback_data='list_punkt'))
    _kb.row(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞',
                                       callback_data='check_price'))

    return _kb


def create_bot_start_kb(marker: Literal['wb', 'ozon']):
    _kb = InlineKeyboardBuilder()
    
    if marker == 'wb':
        _kb.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
                                        callback_data='add_punkt'))
        _kb.row(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏',
                                        callback_data='list_punkt'))
        _kb.row(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                                        callback_data='add_wb_product'))
        _kb.row(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã',
                                        callback_data='view_price'))

    else:
        _kb.add(types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä',
                                           callback_data='add_product'))
        _kb.row(types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä',
                                           callback_data='list_product'))
        _kb.row(types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã',
                                           callback_data='remove_all_products')) 

    return _kb


def create_or_add_cancel_btn(_kb: InlineKeyboardBuilder = None):
    if _kb is None:
        _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å',
                                       callback_data='cancel'))
    
    return _kb


def create_or_add_exit_btn(_kb: InlineKeyboardBuilder = None):
    if _kb is None:
        _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å',
                                       callback_data='exit'))
    
    return _kb


def add_back_btn(_kb: InlineKeyboardBuilder):
    _kb.row(types.InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é',
                                       callback_data=f'to_main'))
    
    return _kb


def create_done_kb(marker: Literal['wb_punkt',
                                   'wb_product',
                                   'ozon_product']):
    _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                                       callback_data=f'done__{marker}'))
    
    return _kb



def create_remove_kb(user_id: int,
                     product_id: str,
                     marker: Literal['wb', 'ozon'],
                     job_id: str,
                     _kb: InlineKeyboardBuilder = None,
                     with_redirect: bool = True):
    if not _kb:
        _kb = InlineKeyboardBuilder()

    _callback_data = f'{marker}_{user_id}_{product_id}_{job_id}'

    if with_redirect:
        _callback_data = f'delete_{_callback_data}'
        # _text = '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'
    else:
        _callback_data = f'delete.no.rd_{_callback_data}'
    
    _text = '–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'

    _kb.row(types.InlineKeyboardButton(text=_text,
                                       callback_data=_callback_data))
    
    return _kb


def create_remove_and_edit_sale_kb(user_id: int,
                                   product_id: str,
                                   marker: Literal['wb', 'ozon'],
                                   job_id: str,
                                   _kb: InlineKeyboardBuilder = None,
                                   with_redirect: bool = True):
    if not _kb:
        _kb = InlineKeyboardBuilder()

    _callback_data = f'{marker}_{user_id}_{product_id}'

    if with_redirect:
        delete_callback_data = f'delete_{_callback_data}_{job_id}'
        edit_sale_callback_data = f'edit.sale_{_callback_data}'
    else:
        delete_callback_data = f'delete.no.rd_{_callback_data}_{job_id}'
        edit_sale_callback_data = f'edit.sale.no.rd_{_callback_data}'
    
    _kb.row(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å–∫–∏–¥–∫–∏',
                                       callback_data=edit_sale_callback_data))
    _kb.row(types.InlineKeyboardButton(text='–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å',
                                       callback_data=delete_callback_data))
    
    return _kb


def add_graphic_btn(_kb: InlineKeyboardBuilder,
                    user_id: int,
                    product_id: int):
    _callback_data = f'graphic_{user_id}_{product_id}'

    _kb.row(types.InlineKeyboardButton(text='–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω',
                                       callback_data=_callback_data))
    
    return _kb
    # city_query = (
    #     select(
    #         Punkt.city
    #     )\
    #     .where(
    #         Punkt.user_id == user_id
    #     )
    # )

    # async with session as _session:
    #     res = await _session.execute(city_query)
    
    # city = res.scalar_one_or_none()

    # if not city:
    #     city = '–ú–û–°–ö–í–ê'
    
    # check_datetime = datetime.now().astimezone(ds) - timedelta(days=1)

    # subquery = (
    #     select(
    #         Product.id
    #     )\
    #     .select_from(UserProduct)\
    #     .join(Product,
    #           UserProduct.product_id == Product.id)\
    #     .where(
    #         UserProduct.id == product_id
    #     ).subquery()
    # )

    # graphic_query = (
    #     select(
    #         ProductCityGraphic.photo_id,
    #     )\
    #     .where(
    #         and_(
    #             ProductCityGraphic.product_id == subquery,
    #             ProductCityGraphic.city == city,
    #         )
    #     )
    # )
    # async with session as _session:


#new
def new_create_remove_and_edit_sale_kb(user_id: int,
                                   product_id: str,
                                   marker: Literal['wb', 'ozon'],
                                   job_id: str,
                                   _kb: InlineKeyboardBuilder = None,
                                   with_redirect: bool = True):
    if not _kb:
        _kb = InlineKeyboardBuilder()

    _callback_data = f'new_{marker}_{user_id}_{product_id}'

    if with_redirect:
        delete_callback_data = f'delete.new_{_callback_data}_{job_id}'
        edit_sale_callback_data = f'edit.new.sale_{_callback_data}'
        graphic_callback_data = f'graphic_{user_id}_{product_id}'
    else:
        delete_callback_data = f'delete.new.no.rd_{_callback_data}_{job_id}'
        edit_sale_callback_data = f'edit.new.sale.no.rd_{_callback_data}'
        graphic_callback_data = f'graphic.bg_{user_id}_{product_id}'
    
    _kb.row(types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å–∫–∏–¥–∫–∏',
                                       callback_data=edit_sale_callback_data))
    _kb.row(types.InlineKeyboardButton(text='–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω',
                                       callback_data=graphic_callback_data))    
    _kb.row(types.InlineKeyboardButton(text='–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å',
                                       callback_data=delete_callback_data))
    
    return _kb


def create_back_to_product_btn(user_id: int,
                               product_id: int,
                               is_background_task: bool = False):
    _kb = InlineKeyboardBuilder()

    if not is_background_task:
        _kb.row(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                                        callback_data=f'back_to_product_{user_id}_{product_id}'))
    else:
        _kb.row(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É',
                                        callback_data=f'back_to_product.bg_{user_id}_{product_id}'))

    return _kb


def create_photo_keyboard(kb_init: str):
    product_kb = InlineKeyboardBuilder()
    match kb_init:
        case 'start':
            product_kb.add(types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è',
                                                    callback_data='product_next'))
        case 'mid':
            product_kb.add(types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∞—è',
                                                    callback_data='product_prev'))
            product_kb.add(types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∞—è',
                                                    callback_data='product_next'))
        case 'end':
            product_kb.add(types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∞—è',
                                                    callback_data='product_prev'))

    # product_kb.row(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
    #                                         callback_data='cancel'))
    return product_kb


def add_cancel_btn_to_photo_keyboard(_kb: InlineKeyboardBuilder):
    _kb.row(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                                        callback_data='cancel'))
    return _kb



def create_product_list_kb(user_id: int,
                           product_list: list,
                           marker: Literal['wb', 'ozon']):
    _kb = InlineKeyboardBuilder()

    for product in product_list:
        product_id, link, actaul_price, start_price, user_id, time_create, name, sale, job_id = product
        _callback_data = f'view-product_{user_id}_{marker}_{product_id}'

        _kb.row(types.InlineKeyboardButton(text=name,
                                           callback_data=_callback_data))
    
    return _kb



def add_or_create_close_kb(_kb: InlineKeyboardBuilder = None):
    if not _kb:
        _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å',
                                       callback_data='close'))
    
    return _kb


def create_reply_start_kb():
    _kb = ReplyKeyboardBuilder()

    # _kb.add(types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'))
    _kb.add(types.KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã'))
    _kb.add(types.KeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))

    return _kb


def create_product_list_for_page_kb(product_list_for_page: list[tuple]):
    _kb = InlineKeyboardBuilder()

    for product in product_list_for_page:
        product_id, link, actual, start, user_id, _date, marker, name, sale, job_id = product
        
        _callback_data = f'view-product1_{user_id}_{marker}_{product_id}'
        
        _kb.row(types.InlineKeyboardButton(text=f'{marker.upper()} || {name}',
                                           callback_data=_callback_data))
    return _kb


# new 
def new_create_product_list_for_page_kb(product_list_for_page: list[tuple]):
    _kb = InlineKeyboardBuilder()

    for product in product_list_for_page:
        product_id, link, actual, start, user_id, _date, marker, name, sale, job_id = product
        
        _callback_data = f'view-product_{user_id}_{marker}_{product_id}'
        
        _kb.row(types.InlineKeyboardButton(text=f'{marker.upper()} || {name}',
                                           callback_data=_callback_data))
    return _kb


def add_pagination_btn(_kb: InlineKeyboardBuilder,
                       product_dict: dict):
    pages = product_dict.get('pages')
    len_product_list = product_dict.get('len_product_list')
    current_page = product_dict.get('current_page')
    product_list = product_dict.get('product_list')

    kb_init: str
    
    if len_product_list <= 5:
        kb_init = 'one'
    else:
        if current_page == 1:
            kb_init = 'start'
        elif 1 < current_page < pages:
            kb_init = 'mid'
        else:
            kb_init = 'end'

    match kb_init:
        case 'start':
            _kb.row(types.InlineKeyboardButton(text=f'{current_page}/{pages}',
                                               callback_data='pagination_page'))
            _kb.add(types.InlineKeyboardButton(text='‚ñ∂',
                                               callback_data='page_next'))
        case 'mid':
            _kb.row(types.InlineKeyboardButton(text='‚óÄ',
                                               callback_data='page_prev'))
            _kb.add(types.InlineKeyboardButton(text=f'{current_page}/{pages}',
                                               callback_data='pagination_page'))
            _kb.add(types.InlineKeyboardButton(text='‚ñ∂',
                                               callback_data='page_next'))
        case 'end':
            _kb.row(types.InlineKeyboardButton(text='‚óÄ',
                                               callback_data='page_prev'))
            _kb.add(types.InlineKeyboardButton(text=f'{current_page}/{pages}',
                                               callback_data='pagination_page'))
    
    return _kb


def new_add_pagination_btn(_kb: InlineKeyboardBuilder,
                       product_dict: dict):
    pages = product_dict.get('pages')
    len_product_list = product_dict.get('len_product_list')
    current_page = product_dict.get('current_page')
    product_list = product_dict.get('product_list')

    kb_init: str
    
    if len_product_list <= 5:
        kb_init = 'one'
    else:
        if current_page == 1:
            kb_init = 'start'
        elif 1 < current_page < pages:
            kb_init = 'mid'
        else:
            kb_init = 'end'

    match kb_init:
        case 'start':
            _kb.row(types.InlineKeyboardButton(text=f'{current_page}/{pages}',
                                               callback_data='new_pagination_page'))
            _kb.add(types.InlineKeyboardButton(text='‚ñ∂',
                                               callback_data='new_page_next'))
        case 'mid':
            _kb.row(types.InlineKeyboardButton(text='‚óÄ',
                                               callback_data='new_page_prev'))
            _kb.add(types.InlineKeyboardButton(text=f'{current_page}/{pages}',
                                               callback_data='new_pagination_page'))
            _kb.add(types.InlineKeyboardButton(text='‚ñ∂',
                                               callback_data='new_page_next'))
        case 'end':
            _kb.row(types.InlineKeyboardButton(text='‚óÄ',
                                               callback_data='new_page_prev'))
            _kb.add(types.InlineKeyboardButton(text=f'{current_page}/{pages}',
                                               callback_data='new_pagination_page'))
    
    return _kb


def create_or_add_return_to_product_list_btn(_kb: InlineKeyboardBuilder = None):
    if not _kb:
        _kb = InlineKeyboardBuilder()
    
    _kb.row(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤',
                                       callback_data='return_to_product_list'))
    
    return _kb


def new_create_or_add_return_to_product_list_btn(_kb: InlineKeyboardBuilder = None):
    if not _kb:
        _kb = InlineKeyboardBuilder()
    
    _kb.row(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤',
                                       callback_data='new_return_to_product_list'))
    
    return _kb


def create_pagination_page_kb(product_dict: dict):
    _kb = InlineKeyboardBuilder()

    current_page = product_dict.get('current_page')
    pages = product_dict.get('pages')

    for page_num in range(1, pages+1):
        _text = f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}'

        if page_num == current_page:
            _text = _text + ('(–≤—ã–±—Ä–∞–Ω–Ω–∞—è)')

        _kb.row(types.InlineKeyboardButton(text=_text,
                                           callback_data=f'go_to_page_{page_num}'))
    
    return _kb


def new_create_pagination_page_kb(product_dict: dict):
    _kb = InlineKeyboardBuilder()

    current_page = product_dict.get('current_page')
    pages = product_dict.get('pages')

    for page_num in range(1, pages+1):
        _text = f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}'

        if page_num == current_page:
            _text = _text + ('(–≤—ã–±—Ä–∞–Ω–Ω–∞—è)')

        _kb.row(types.InlineKeyboardButton(text=_text,
                                           callback_data=f'new_go_to_page_{page_num}'))
    
    return _kb


def create_settings_kb():
    _kb = InlineKeyboardBuilder()

    # _kb.add(types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Wildberries',
    #                                    callback_data='settings_wb'))
    # _kb.add(types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ozon',
    #                                    callback_data='settings_ozon'))
    _kb.add(types.InlineKeyboardButton(text='–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏',
                                       callback_data='settings_punkt'))
    _kb.row(types.InlineKeyboardButton(text='FAQ',
                                       callback_data='settings_faq'))
    _kb.row(types.InlineKeyboardButton(text='–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                                       url='https://t.me/NaSkidku_support'))

    # _kb.row(types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ',
    #                                    callback_data='settings_company'))
    
    return _kb


def create_specific_settings_block_kb(marker: Literal['wb', 'ozon'],
                                      has_punkt: str = None):
    _kb = InlineKeyboardBuilder()

    if has_punkt:
        _text = f'–ò–∑–º–µ–Ω–∏—Ç—å {marker.upper()} –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏'
        _callback_data = f'punkt_edit_{marker}'
    else:
        _text = f'–î–æ–±–∞–≤–∏—Ç—å {marker.upper()} –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏'
        _callback_data = f'punkt_add_{marker}'

    _kb.row(types.InlineKeyboardButton(text=_text,
                                       callback_data=_callback_data))
    
    if has_punkt:
        _delete_text = f'–£–¥–∞–ª–∏—Ç—å {marker.upper()} –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏'
        _delete_callback_data = f'punkt_delete_{marker}'
        
        _kb.row(types.InlineKeyboardButton(text=_delete_text,
                                           callback_data=_delete_callback_data))

    return _kb


def create_punkt_settings_block_kb(has_punkt: str = None):
    _kb = InlineKeyboardBuilder()

    if has_punkt:
        _text = f'–ò–∑–º–µ–Ω–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏'
        _callback_data = f'punkt_edit'
    else:
        _text = f'–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏'
        _callback_data = f'punkt_add'

    _kb.row(types.InlineKeyboardButton(text=_text,
                                       callback_data=_callback_data))
    
    if has_punkt:
        _delete_text = f'–£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏'
        _delete_callback_data = f'punkt_delete'
        
        _kb.row(types.InlineKeyboardButton(text=_delete_text,
                                           callback_data=_delete_callback_data))

    return _kb


def create_faq_kb():
    _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='FAQ',
                                        callback_data='faq'))
    
    return _kb


def create_back_to_faq_kb():
    _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è',
                                        callback_data='back_to_faq'))
    
    return _kb


def create_or_add_exit_faq_btn(_kb:InlineKeyboardBuilder = None):
    if _kb is None:
        _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å',
                                       callback_data='exit_faq'))
    
    return _kb



def create_question_faq_kb():
    _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é?',
                                        callback_data='question_add_product'))
    _kb.row(types.InlineKeyboardButton(text='–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã?',
                                        callback_data='question_view_product'))
    _kb.row(types.InlineKeyboardButton(text='–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É —Å–∫–∏–¥–∫–∏ —É —Ç–æ–≤–∞—Ä–æ–≤?',
                                        callback_data='question_edit_sale_product'))
    _kb.row(types.InlineKeyboardButton(text='–ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–∫–∏–¥–∫—É?',
                                        callback_data='question_delete_product'))
    _kb.row(types.InlineKeyboardButton(text='–ö–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç?',
                                        callback_data='question_send_push_product'))
    _kb.row(types.InlineKeyboardButton(text='–ò–∑ –∫–∞–∫–∏—Ö —Å—Ç—Ä–∞–Ω –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä?',
                                        callback_data='question_country_product'))
    
    return _kb



def create_remove_popular_kb(marker: str,
                             popular_product_id: int):
    _kb = InlineKeyboardBuilder()

    _kb.row(types.InlineKeyboardButton(text='–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä',
                                       callback_data=f'popular_product:{marker}:{popular_product_id}'))
    
    return _kb